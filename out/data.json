{
    "project": {},
    "files": {
        "js\\object\\axis.js": {
            "name": "js\\object\\axis.js",
            "modules": {},
            "classes": {
                "ResponsiveAxis": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\object\\brush.js": {
            "name": "js\\object\\brush.js",
            "modules": {},
            "classes": {
                "ResponsiveBrush": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\object\\event.js": {
            "name": "js\\object\\event.js",
            "modules": {},
            "classes": {
                "ResponsiveEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\object\\selector.js": {
            "name": "js\\object\\selector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\object\\tooltip.js": {
            "name": "js\\object\\tooltip.js",
            "modules": {},
            "classes": {
                "ResponsiveTooltip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\utils\\constants.js": {
            "name": "js\\utils\\constants.js",
            "modules": {},
            "classes": {
                "ResponsiveConstants": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\utils\\less.js": {
            "name": "js\\utils\\less.js",
            "modules": {},
            "classes": {
                "ResponsiveLess": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\utils\\treeUtil.js": {
            "name": "js\\utils\\treeUtil.js",
            "modules": {},
            "classes": {
                "ResponsiveTreeUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\utils\\util.js": {
            "name": "js\\utils\\util.js",
            "modules": {},
            "classes": {
                "ResponsiveUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\visualizations\\presentation.js": {
            "name": "js\\visualizations\\presentation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\visualizations\\timelineMin.js": {
            "name": "js\\visualizations\\timelineMin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\visualizations\\treemap.js": {
            "name": "js\\visualizations\\treemap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\keyboard.js": {
            "name": "lib\\keyboard.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib\\less.min.js": {
            "name": "lib\\less.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "ResponsiveAxis": {
            "name": "ResponsiveAxis",
            "shortname": "ResponsiveAxis",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\object\\axis.js",
            "line": 1,
            "description": "<b>Responsive Axis For d3js library :</b><br/>\n<br/>\nResponive axis allows you to create axis for timeline, line chart, ...\nThose axis will be responsive and you don't need to take care to\nthe size of them. <br/>\nTo instanciate one, you need to set the following parameters into a json object :<br/>\n<b>g</b> : g element used to draw chart (required)<br/>\n<b>orientation</b> : top, bottom, left, right (default bottom)<br/>\n<b>datatype</b> : type of data to display on axis<br/>\n<b>domain</b> : array of values to display on axis (required)<br/>\n<b>cls</b> : css class for axis<br/>\n<b>autoresize</b>  : indicate if resize is automatically done (default false)<br/>\n<b>fixedHeight</b> : indicate if the size of y axis is not resizable (default false)<br/>\n<br/>\n<b>Example:</b><br/>\n var axis = new ResponsiveAxis({<br/>\n     &nbsp;&nbsp;&nbsp;g: graph,<br/>\n     &nbsp;&nbsp;&nbsp;orientation: $$ResponsiveUtil._BOTTOM_,<br/>\n     &nbsp;&nbsp;&nbsp;datatype: \"year\",<br/>\n     &nbsp;&nbsp;&nbsp;cls: \"x axis\",<br/>\n     &nbsp;&nbsp;&nbsp;domain: d3.extent(data, function (d) {<br/>\n         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return d.date;<br/>\n     &nbsp;&nbsp;&nbsp;}),<br/>\n     &nbsp;&nbsp;&nbsp;autoresize: false<br/>\n )();<br/>\n<br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveBrush": {
            "name": "ResponsiveBrush",
            "shortname": "ResponsiveBrush",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\object\\brush.js",
            "line": 1,
            "description": "<b>Responsive Brush For d3js library :</b><br/>\n<br/>\nResponive brush allows you to create brush for timeline, line chart, ...\nBrush system allows you to zoom and navigate into your chart.\nBrush element will be responsive and you don't need to take care to\nthe size of them. <br/>\nTo instantiate one, you need to set the following parameters into a json object :<br/>\n<b>svg</b> : svg element (required)<br/>\n<b>area</b> : area element used to draw chart (required)<br/>\n<b>areaSelector</b> : d3js selector to retrieve area (required)<br/>\n<b>cX</b> : x axis of main chart (required)<br/>\n<b>cY</b> : y axis of main chart (required)<br/>\n<b>height</b> : height of the brush element (default 50)<br/>\n<b>margin</b> : margin to apply to brush element (default {top: 0, right: 0, bottom: 0, left: 0})<br/>\n<b>autoresize</b>  : indicate if resize is automatically done (default false)<br/>\n<br/>\n<b>Example:</b><br/>\nvar brush = new ResponsiveBrush({<br/>\n     &nbsp;&nbsp;&nbsp;svg: svg,<br/>\n     &nbsp;&nbsp;&nbsp;area: area,<br/>\n     &nbsp;&nbsp;&nbsp;areaSelector: \".area\",<br/>\n     &nbsp;&nbsp;&nbsp;cX: aResponsiveAxis,<br/>\n     &nbsp;&nbsp;&nbsp;cY: aResponsiveAxis,<br/>\n     &nbsp;&nbsp;&nbsp;margin: {<br/>\n         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top: 50,<br/>\n         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left: 60<br/>\n     &nbsp;&nbsp;&nbsp;}<br/>\n })();<br/>\n <br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveEvent": {
            "name": "ResponsiveEvent",
            "shortname": "ResponsiveEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\object\\event.js",
            "line": 1,
            "description": "<b>Responsive Event For d3js library :</b><br/>\n<br/>\nResponive event allows you to define only one event for all devices by extension. <br/>\nTo instantiate one, you need to pass the following parameters into a json object :<br/>\n<b>object</b> : object which listen to events (required)<br/>\n<b>events</b> : list of events that can be extended\nassociated with function listen by the object (required)<br/>\n<br/>\n<b>Example:</b><br/>\nnew ResponsiveEvent({<br/>\n     &nbsp;&nbsp;&nbsp;object : window,<br/>\n     &nbsp;&nbsp;&nbsp;events : [<br/>\n         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"name\" : \"mousemove\", \"func\": function1, \"extend\": true},<br/>\n         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"name\" : \"mouseout\", \"func\": function2, \"extend\": false,<br/>\n         &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\"name\" : \"touchend\", \"func\": function3, \"extend\": false}<br/>\n     &nbsp;&nbsp;&nbsp;]<br/>\n})()<br/>\n<br/>\n<b>Mapped events</b>\n<table>\n<tr><th>Mouse</th><th>Touch</th><tr>\n<tr><td>mousedown</td><td>touchstart</td><tr>\n<tr><td>mouseup</td><td>touchenter</td><tr>\n<tr><td>mouseover</td><td>mouseover</td><tr>\n<tr><td>mouseout</td><td>touchleave</td><tr>\n<tr><td>mousemove</td><td>touchmove</td><tr>\n<tr><td>click</td><td>tap</td><tr>\n<tr><td>dblclick</td><td>doubletap</td><tr>\n<tr><td>mousecancel (fake)</td><td>touchcancel</td><tr>\n</table>\n</br>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveTooltip": {
            "name": "ResponsiveTooltip",
            "shortname": "ResponsiveTooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\object\\tooltip.js",
            "line": 1,
            "description": "<b>Responsive Tooltip For d3js library :</b><br/>\n<br/>\nResponive tooltip allows you to create tooltip to show details.\nTooltip element will be responsive and you don't need to take care to\nthe size and position of them. <br/>\nTo instantiate one, you need to set the following parameters into a json object :<br/>\n<b>g</b> : g element used to draw tooltip (required)<br/>\n<b>cls</b> : css class for axis<br/>\n<b>autoresize</b>  : indicate if resize is automatically done (default false)<br/>\n<br/>\n<b>Example:</b><br/>\nvar tooltip = new ResponsiveTooltip({<br/>\n     &nbsp;&nbsp;&nbsp;g: g,<br/>\n     &nbsp;&nbsp;&nbsp;cls: \"fixed_tooltip\",<br/>\n })();<br/>\n <br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveConstants": {
            "name": "ResponsiveConstants",
            "shortname": "ResponsiveConstants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\utils\\constants.js",
            "line": 1,
            "description": "<b>Responsive Constants For d3js library :</b><br/>\n<br/>\nResponive constants offers several constants\n<br/>\nIt already instanciate, to use it you have to use the variable: <br/>\n- $$ResponsiveConstants\n<br/>\n<b>Example:</b><br/>\nvar xsmin = $$ResponsiveConstants._XSMIN_();\n<br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveLess": {
            "name": "ResponsiveLess",
            "shortname": "ResponsiveLess",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\utils\\less.js",
            "line": 1,
            "description": "<b>Responsive Less For d3js library :</b><br/>\n<br/>\nResponive less offers several tools for less file\n<br/>\nIt already instanciate, to use it you have to use the variable: <br/>\n- $$ResponsiveLess\n<br/>\n<b>Example:</b><br/>\n$$ResponsiveLess.updateVariables();\n<br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveTreeUtil": {
            "name": "ResponsiveTreeUtil",
            "shortname": "ResponsiveTreeUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\utils\\treeUtil.js",
            "line": 1,
            "description": "<b>Responsive TreeUtil For d3js library :</b><br/>\n<br/>\nResponive treeUtil offers several tools for trees\n<br/>\nIt already instanciate, to use it you have to use the variable: <br/>\n- $$ResponsiveTreeUtil\n<br/>\n<b>Example:</b><br/>\nvar allParents = $$ResponsiveTreeUtil.getAllParents(d);\n<br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        },
        "ResponsiveUtil": {
            "name": "ResponsiveUtil",
            "shortname": "ResponsiveUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\utils\\util.js",
            "line": 1,
            "description": "<b>Responsive Util For d3js library :</b><br/>\n<br/>\nIt already instanciate, to use it you have to use the variable: <br/>\n- $$ResponsiveUtil\n<br/>\n<b>Example:</b><br/>\nvar isMobile = $$ResponsiveUtil.mobile();\n<br/>",
            "is_constructor": 1,
            "version": "0.1",
            "author": "Leclaire Juliana",
            "support": "d3js v3"
        }
    },
    "classitems": [
        {
            "file": "js\\object\\axis.js",
            "line": 37,
            "description": "g element used to draw chart<br/>\nRead with : axis.g()<br/>\nWrite with : axis.g(newValue)<br/>",
            "itemtype": "attribute",
            "name": "g",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 48,
            "description": "Size of current axis in px<br/>\nRead with : axis.size()<br/>\nWrite with : axis.size(newValue)<br/>",
            "itemtype": "attribute",
            "name": "size",
            "access": "private",
            "tagname": "",
            "type": "Integer",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 58,
            "description": "Orientation of the axis<br/>\nEnable values : top, bottom, left, right<br/>\nRead with : axis.orientation()<br/>\nWrite with : axis.orientation(newValue)<br/>",
            "itemtype": "attribute",
            "name": "orientation",
            "access": "public",
            "tagname": "",
            "type": "String",
            "default": "bottom",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 70,
            "description": "Type of data to display on axis<br/>\nEnable values : year, month, day<br/>\nRead with : axis.datatype()<br/>\nWrite with : axis.datatype(newValue)<br/>",
            "itemtype": "attribute",
            "name": "datatype",
            "access": "public",
            "tagname": "",
            "type": "String",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 81,
            "description": "Array of values to display on axis<br/>\nRead with : axis.domain()<br/>\nWrite with : axis.domain(newValue)<br/>",
            "itemtype": "attribute",
            "name": "domain",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Array",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 92,
            "description": "Css class to apply on axis<br/>\nRead with : axis.cls()<br/>\nWrite with : axis.cls(newValue)<br/>",
            "itemtype": "attribute",
            "name": "cls",
            "access": "public",
            "tagname": "",
            "type": "String",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 102,
            "description": "Indicate if resize is automatically done<br/>\nRead with : axis.autoresize()<br/>\nWrite with : axis.autoresize(newValue)<br/>",
            "itemtype": "attribute",
            "name": "autoresize",
            "access": "public",
            "tagname": "",
            "type": "Boolean",
            "default": "false",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 113,
            "description": "Indicate if the size of y axis is not resizable<br/>\nRead with : axis.fixedHeight()<br/>\nWrite with : axis.fixedHeight(newValue)<br/>",
            "itemtype": "attribute",
            "name": "fixedHeight",
            "access": "public",
            "tagname": "",
            "type": "Boolean",
            "default": "false",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 124,
            "description": "List of events attached<br/>\nRead with : axis.events()<br/>",
            "itemtype": "attribute",
            "name": "events",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "readonly": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 136,
            "description": "ResponsiveAxis Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 167,
            "description": "Method to attach custom event",
            "itemtype": "method",
            "name": "on",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to add",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "function to call on event triggered",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 183,
            "description": "Method to trigger event",
            "itemtype": "method",
            "name": "trigger",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to trigger",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "arguments to apply to the function called",
                    "type": "Object"
                }
            ],
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 204,
            "description": "Method to remove function on event",
            "itemtype": "method",
            "name": "remove",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to clear",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "function to remove",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 219,
            "description": "Add default events to current object",
            "itemtype": "method",
            "name": "addDefaultEvents",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 229,
            "description": "This method init properties for axis",
            "itemtype": "method",
            "name": "initProperties",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 251,
            "description": "Retrieve the parent container of g element",
            "itemtype": "method",
            "name": "initContainer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "parent container of g element",
                "type": "HTMLElement"
            },
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 267,
            "description": "Initialize data to display on axis",
            "itemtype": "method",
            "name": "initContainer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "data created by the function",
                "type": "Object"
            },
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 295,
            "description": "Initialize axis",
            "itemtype": "method",
            "name": "initAxis",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "the data returned by initData function",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "axis created by the function",
                "type": "Object"
            },
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 308,
            "description": "Initialize gap : the difference between container size and current graph size",
            "itemtype": "method",
            "name": "initRatio",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "the g container",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gap",
                "type": "Object"
            },
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 326,
            "description": "This method allows to update gap proportion (height and width)",
            "itemtype": "method",
            "name": "updateRatio",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "updateHeight",
                    "description": "indicate if need to update height value of gap",
                    "type": "Boolean"
                },
                {
                    "name": "value",
                    "description": "value to add to gap",
                    "type": "Integer"
                },
                {
                    "name": "redraw",
                    "description": "indicate if axis need to be redraw",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "gap into json object {heigh: h, width: w}",
                "type": "Object"
            },
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 349,
            "description": "This method recalculates the height of gap\n(used for axis that have fixed height)",
            "itemtype": "method",
            "name": "updateHeightRatio",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 361,
            "description": "This method update range of axis",
            "itemtype": "method",
            "name": "updateHeightRatio",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 379,
            "description": "This method updates axis size with the size sets in parameter\nIf parameter is not set, the axis is resize to the complete of container",
            "itemtype": "method",
            "name": "updateHeightRatio",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "cSize",
                    "description": "json size of container {height: h, width: w}",
                    "type": "Object"
                }
            ],
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 402,
            "description": "This method update the quantity of information\ndisplay on the axis",
            "itemtype": "method",
            "name": "updateAxisTicks",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 431,
            "description": "Get the container size",
            "itemtype": "method",
            "name": "getContainerSize",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "size into json object {height: h, width: w}",
                "type": "Object"
            },
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\axis.js",
            "line": 447,
            "description": "Method that draws axis into g :<br/>\nUpdates :<br/>\n - the size of axis (automatically recalculated)\n - the range\n - the quantity of information to display",
            "itemtype": "method",
            "name": "draw",
            "access": "public",
            "tagname": "",
            "class": "ResponsiveAxis"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 39,
            "description": "Main svg element<br/>\nRead with : brush.svg()<br/>\nWrite with : brush.svg(newValue)<br/>",
            "itemtype": "attribute",
            "name": "g",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 50,
            "description": "Area element used to draw chart<br/>\nRead with : brush.area()<br/>\nWrite with : brush.area(newValue)<br/>",
            "itemtype": "attribute",
            "name": "area",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 61,
            "description": "d3js selector to retrieve area<br/>\nRead with : brush.areaSelector()<br/>\nWrite with : brush.areaSelector(newValue)<br/>",
            "itemtype": "attribute",
            "name": "areaSelector",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 72,
            "description": "x axis of main chart<br/>\nRead with : brush.cX()<br/>\nWrite with : brush.cX(newValue)<br/>",
            "itemtype": "attribute",
            "name": "cX",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "ResponsiveAxis",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 83,
            "description": "y axis of main chart<br/>\nRead with : brush.cY()<br/>\nWrite with : brush.cY(newValue)<br/>",
            "itemtype": "attribute",
            "name": "cY",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "ResponsiveAxis",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 94,
            "description": "Meight of the brush element<br/>\nRead with : brush.height()<br/>\nWrite with : brush.height(newValue)<br/>",
            "itemtype": "attribute",
            "name": "height",
            "access": "public",
            "tagname": "",
            "type": "Integer",
            "default": "50",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 105,
            "description": "Margin to apply to brush element<br/>\nRead with : brush.margin()<br/>\nWrite with : brush.margin(newValue)<br/>",
            "itemtype": "attribute",
            "name": "margin",
            "access": "public",
            "tagname": "",
            "type": "Object",
            "default": "{top: 0, right: 0, bottom: 0, left: 0}",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 116,
            "description": "Indicate if resize is automatically done<br/>\nRead with : axis.autoresize()<br/>\nWrite with : axis.autoresize(newValue)<br/>",
            "itemtype": "attribute",
            "name": "autoresize",
            "access": "public",
            "tagname": "",
            "type": "Boolean",
            "default": "false",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 130,
            "description": "ResponsiveBrush Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 162,
            "description": "Method to attach custom event",
            "itemtype": "method",
            "name": "on",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to add",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "function to call on event triggered",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 178,
            "description": "Method to trigger event",
            "itemtype": "method",
            "name": "trigger",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to trigger",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "arguments to apply to the function called",
                    "type": "Object"
                }
            ],
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 199,
            "description": "Method to remove function on event",
            "itemtype": "method",
            "name": "remove",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event event to clear",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "function function to remove",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 214,
            "description": "Add default events to current object",
            "itemtype": "method",
            "name": "addDefaultEvents",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 224,
            "description": "This method init properties for axis",
            "itemtype": "method",
            "name": "initProperties",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 272,
            "description": "Initialize g element to draw brush",
            "itemtype": "method",
            "name": "initGraph",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "g element create",
                "type": "Object"
            },
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 288,
            "description": "Initialize brush",
            "itemtype": "method",
            "name": "initBrush",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ResponsiveAxis",
                    "description": "x"
                }
            ],
            "return": {
                "description": "brush",
                "type": "Object"
            },
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 307,
            "description": "Construct the brush slider",
            "itemtype": "method",
            "name": "constructSlider",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 322,
            "description": "Method that draws the brush :<br/>\nUpdate his size automatically",
            "itemtype": "method",
            "name": "draw",
            "access": "public",
            "tagname": "",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\brush.js",
            "line": 337,
            "description": "Method that brushes<br/>\nUpdate the domain of main chart",
            "itemtype": "method",
            "name": "brushed",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveBrush"
        },
        {
            "file": "js\\object\\event.js",
            "line": 41,
            "description": "Object which listen to events<br/>\nRead with : object.g()<br/>\nWrite with : object.g(newValue)<br/>",
            "itemtype": "attribute",
            "name": "object",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 52,
            "description": "List of events that can be extended\nassociated with function listen by the object<br/>\nRead with : axis.events()<br/>\nWrite with : axis.events(newValue)<br/>",
            "itemtype": "attribute",
            "name": "events",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 64,
            "itemtype": "attribute",
            "name": "eventsId",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 86,
            "description": "ResponsiveEvent Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 104,
            "description": "This method init properties for axis",
            "itemtype": "method",
            "name": "initProperties",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 122,
            "description": "Define event on current obj",
            "itemtype": "method",
            "name": "initEvent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "name of event to define",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "function to invoke when event is triggered",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 142,
            "description": "Intercept the touch event triggered by the user in order to transform it",
            "itemtype": "method",
            "name": "intercept",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 160,
            "description": "Transform a touch event into mouse event and dispatch it",
            "itemtype": "method",
            "name": "transformEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "Hammer Event or Touch Event to transform",
                    "type": "Event"
                },
                {
                    "name": "type",
                    "description": "name of event",
                    "type": "String"
                }
            ],
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 194,
            "description": "Indicate if event name pass in parameter is mouse event",
            "itemtype": "method",
            "name": "isMouseEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if event is mouse event",
                "type": "Boolean"
            },
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 206,
            "description": "Method that retrieves \nthe mapped event to event pass in parameter",
            "itemtype": "method",
            "name": "getMappedEvent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "name of event to get the matching event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "event name of mapped event",
                "type": "String"
            },
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\event.js",
            "line": 231,
            "description": "Method that generates unique id",
            "itemtype": "method",
            "name": "generateId",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "an unique id",
                "type": "String"
            },
            "class": "ResponsiveEvent"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 8,
            "description": "Create a responsive selector",
            "params": [
                {
                    "name": "json",
                    "description": "object options :\ng : graph\ndepth : the initial depth\nlayout : layout for data\nparentsCls : class name for parents\nchildrenCls : children class name\nnode : the current node\nroot : the root of tree\nautoresize : indicate if resize is automatically done"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 33,
            "description": "Constructor",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 54,
            "description": "Method to attach custom event",
            "params": [
                {
                    "name": "the",
                    "description": "event to add"
                },
                {
                    "name": "the",
                    "description": "function to call on event triggered"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 67,
            "description": "Method to trigger event",
            "params": [
                {
                    "name": "the",
                    "description": "event to trigger"
                },
                {
                    "name": "the",
                    "description": "args to apply to the function called"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 85,
            "description": "Method to remove event on function",
            "params": [
                {
                    "name": "the",
                    "description": "event to clear"
                },
                {
                    "name": "the",
                    "description": "function to remove"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 97,
            "description": "Add default events to current object",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 113,
            "description": "Method to init properties for tooltip",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 130,
            "description": "Retrieve the container element",
            "return": {
                "description": "container",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 143,
            "description": "Init gap",
            "return": {
                "description": "object gap"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 157,
            "description": "Init data and put element\nallParents on children \nif it doesn't exist",
            "return": {
                "description": "parents",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 185,
            "description": "Method to init first parents outline",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 254,
            "description": "Method to draw title of first parent",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 291,
            "description": "Method to update first parents outline",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 359,
            "description": "Method to update first parents title",
            "params": [
                {
                    "name": "node",
                    "description": ""
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 397,
            "description": "Get the selector container size",
            "return": {
                "description": "json object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 411,
            "description": "Method to draw the outline",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 465,
            "description": "Method to draw the selector",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 473,
            "description": "Method to draw the outline of node",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 503,
            "description": "Method to redraw the selector\non a changed node",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 514,
            "description": "Method to hide",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\selector.js",
            "line": 534,
            "description": "Method called on window resize event",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 26,
            "description": "g element used to draw tooltip<br/>\nRead with : tooltip.g()<br/>\nWrite with : tooltip.g(newValue)<br/>",
            "itemtype": "attribute",
            "name": "g",
            "access": "public",
            "tagname": "",
            "required": 1,
            "type": "Object",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 38,
            "description": "Css class to apply on tooltip<br/>\nRead with : tooltip.cls()<br/>\nWrite with : tooltip.cls(newValue)<br/>",
            "itemtype": "attribute",
            "name": "cls",
            "access": "public",
            "tagname": "",
            "type": "String",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 48,
            "description": "Indicate if resize is automatically done<br/>\nRead with : tooltip.autoresize()<br/>\nWrite with : tooltip.autoresize(newValue)<br/>",
            "itemtype": "attribute",
            "name": "autoresize",
            "access": "public",
            "tagname": "",
            "type": "Boolean",
            "default": "false",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 59,
            "description": "List of events attached <br/>\nRead with : tooltip.events()<br/>",
            "itemtype": "attribute",
            "name": "events",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "readonly": "",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 71,
            "description": "ResponsiveTooltip Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 96,
            "description": "Method to attach custom event",
            "itemtype": "method",
            "name": "on",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to add",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "function to call on event triggered",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 112,
            "description": "Method to trigger event",
            "itemtype": "method",
            "name": "trigger",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to trigger",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "arguments to apply to the function called",
                    "type": "Object"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 148,
            "description": "Method to remove function on event",
            "itemtype": "method",
            "name": "remove",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "event to clear",
                    "type": "Object"
                },
                {
                    "name": "func",
                    "description": "function to remove",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 163,
            "description": "Add default events to current object",
            "itemtype": "method",
            "name": "addDefaultEvents",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 174,
            "description": "This method init properties for tooltip",
            "itemtype": "method",
            "name": "initProperties",
            "access": "private",
            "tagname": "",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 196,
            "description": "Retrieve the parent container of g element",
            "itemtype": "method",
            "name": "initContainer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "parent container of g element",
                "type": "HTMLElement"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 212,
            "description": "Initialize container for tooltip",
            "itemtype": "method",
            "name": "initTooltip",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "width of tooltip",
                    "type": "String"
                }
            ],
            "return": {
                "description": "tooltip container created",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 232,
            "description": "Initialize width container for tooltip",
            "itemtype": "method",
            "name": "initWidth",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "tooltip width",
                "type": "String"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 257,
            "description": "Initialize gap : the difference between container size and current graph size",
            "itemtype": "method",
            "name": "initRatio",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "container",
                    "description": "the g container",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gap",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 274,
            "description": "Get the container tooltip height",
            "itemtype": "method",
            "name": "getHeight",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "height of clientHeight tooltip container",
                "type": "String"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 287,
            "description": "Get the container tooltip width",
            "itemtype": "method",
            "name": "getWidth",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "width of clientWidth tooltip container",
                "type": "String"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 300,
            "description": "Get if the tooltip is drawn",
            "itemtype": "method",
            "name": "getIsDrawn",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "true if the tooltip is drawn",
                "type": "Boolean"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 314,
            "description": "Get the container g position",
            "itemtype": "method",
            "name": "getGPosition",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "position into json object {x: vx, y: vy}",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 329,
            "description": "Get the container tooltip position",
            "itemtype": "method",
            "name": "getTooltipPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "width of g",
                    "type": "String"
                },
                {
                    "name": "height",
                    "description": "height of g",
                    "type": "String"
                }
            ],
            "return": {
                "description": "position into json object {tooltipLeft: tl, tooltipTop: tp}",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 408,
            "description": "Get the container size",
            "itemtype": "method",
            "name": "getContainerSize",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "size into json object {height: h, width: w}",
                "type": "Object"
            },
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 424,
            "description": "Method that draws tooltip :<br/>\nUpdates :<br/>\n - the data of tooltip\n - the tooltip position (automatically recalculated)",
            "itemtype": "method",
            "name": "draw",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "content of tooltip",
                    "type": "String"
                }
            ],
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\object\\tooltip.js",
            "line": 456,
            "description": "Method to hide tooltip object",
            "itemtype": "method",
            "name": "hide",
            "access": "public",
            "tagname": "",
            "class": "ResponsiveTooltip"
        },
        {
            "file": "js\\utils\\constants.js",
            "line": 41,
            "description": "ResponsiveConstants Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveConstants"
        },
        {
            "file": "js\\utils\\constants.js",
            "line": 55,
            "description": "Method to update less variables",
            "itemtype": "method",
            "name": "updateLessVariables",
            "access": "public",
            "tagname": "",
            "class": "ResponsiveConstants"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 20,
            "description": "List of less variables<br/>\nRead with : less.variables()<br/>",
            "itemtype": "attribute",
            "name": "variables",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "readonly": "",
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 32,
            "description": "Variable use to keep less variables modifcations before update them",
            "itemtype": "attribute",
            "name": "prepareLessVariables",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "readonly": "",
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 42,
            "description": "ResponsiveLess Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 68,
            "description": "Method that generates unique id",
            "itemtype": "method",
            "name": "generateId",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "an unique id",
                "type": "String"
            },
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 80,
            "description": "This method generates getters and setters options for object obj",
            "itemtype": "method",
            "name": "generateAccessors",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "accessors for object obj",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "json object options",
                    "type": "Object"
                }
            ],
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 99,
            "description": "getLessVars parses your LESS variables to Javascript (provided you make a dummy node in LESS)",
            "itemtype": "method",
            "name": "getLessVars",
            "params": [
                {
                    "name": "id",
                    "description": "The CSS-id your variables are listed under.",
                    "type": "String"
                },
                {
                    "name": "parseNumbers",
                    "description": "Try to parse units as numbers.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "A value object containing your LESS variables.",
                "type": "Object"
            },
            "example": [
                "\nLESS:\n\t&#64;myLessVariable: 123px;\n\t#dummyLessId { width: @myLessVariable; }\nJavascript:\n\tgetLessVars('dummyLessId');\nreturns:\n\t{myLessVariable:123}"
            ],
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 146,
            "description": "Method to retrieve the initial \nvalue of less vars using the function less.modifyVars",
            "itemtype": "method",
            "name": "attributeValueInitialToVars",
            "access": "public",
            "tagname": "",
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\less.js",
            "line": 168,
            "description": "Method to update less variables",
            "itemtype": "method",
            "name": "updateVariables",
            "access": "public",
            "tagname": "",
            "class": "ResponsiveLess"
        },
        {
            "file": "js\\utils\\treeUtil.js",
            "line": 20,
            "description": "ResponsiveTreeUtil Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveTreeUtil"
        },
        {
            "file": "js\\utils\\treeUtil.js",
            "line": 35,
            "description": "Get all parents on node",
            "itemtype": "method",
            "name": "getAllParents",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "node to get all parents",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "parents of node",
                "type": "Array"
            },
            "class": "ResponsiveTreeUtil"
        },
        {
            "file": "js\\utils\\treeUtil.js",
            "line": 52,
            "description": "To know if text needs \nto be in light color",
            "itemtype": "method",
            "name": "needLightColor",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "color",
                    "description": "color to evaluate",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the text needs light color",
                "type": "Boolean"
            },
            "class": "ResponsiveTreeUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 18,
            "description": "ResponsiveUtil Constructor",
            "itemtype": "method",
            "name": "my",
            "access": "public",
            "tagname": "",
            "is_constructor": 1,
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 53,
            "description": "Method that generates unique id",
            "itemtype": "method",
            "name": "generateId",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "an unique id",
                "type": "String"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 65,
            "description": "This method generates getters and setters options for object obj",
            "itemtype": "method",
            "name": "generateAccessors",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "accessors for object obj",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "json object options",
                    "type": "Object"
                }
            ],
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 84,
            "description": "This method allow to add multiple resize events on window",
            "itemtype": "method",
            "name": "addResizeEvent",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "function to invoke when event resize is triggered",
                    "type": "Function"
                }
            ],
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 101,
            "description": "This method is use to detect whether the \nusers browser is an mobile browser",
            "itemtype": "method",
            "name": "mobile",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "true if the device is a mobile",
                "type": "Boolean"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 129,
            "description": "This method return the position of cursor",
            "itemtype": "method",
            "name": "getCursorPosition",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "position into json object {x; vx, y: vy}",
                "type": "Object"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 144,
            "description": "This method return the position of element",
            "itemtype": "method",
            "name": "getElementPosition",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "id for get element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "position into json object {x; vx, y: vy}",
                "type": "Object"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 166,
            "description": "This method is use to detect whether the \ncursor clicked is included",
            "itemtype": "method",
            "name": "isPositionOutsideContainer",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "margin",
                    "description": "margin for the outside zone",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the event is outside",
                "type": "Boolean"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 188,
            "description": "Calculate width of current screen",
            "itemtype": "method",
            "name": "getWidth",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "screen width",
                "type": "String"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\utils\\util.js",
            "line": 209,
            "description": "Calculate height of current screen",
            "itemtype": "method",
            "name": "getHeight",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "screen height",
                "type": "String"
            },
            "class": "ResponsiveUtil"
        },
        {
            "file": "js\\visualizations\\presentation.js",
            "line": 120,
            "description": "Fonctions d'initialisation",
            "class": ""
        },
        {
            "file": "js\\visualizations\\presentation.js",
            "line": 240,
            "description": "Getters AND Setters",
            "class": ""
        },
        {
            "file": "js\\visualizations\\presentation.js",
            "line": 440,
            "description": "Methods",
            "class": ""
        },
        {
            "file": "js\\visualizations\\timelineMin.js",
            "line": 80,
            "description": "Fonctions d'initialisation",
            "class": ""
        },
        {
            "file": "js\\visualizations\\timelineMin.js",
            "line": 205,
            "description": "Getters AND Setters",
            "class": ""
        },
        {
            "file": "js\\visualizations\\timelineMin.js",
            "line": 348,
            "description": "Methods",
            "class": ""
        },
        {
            "file": "js\\visualizations\\treemap.js",
            "line": 112,
            "description": "Fonctions d'initialisation",
            "class": ""
        },
        {
            "file": "js\\visualizations\\treemap.js",
            "line": 212,
            "description": "Getters AND Setters",
            "class": ""
        },
        {
            "file": "js\\visualizations\\treemap.js",
            "line": 412,
            "description": "Methods",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 1,
            "description": "Title: KeyboardJS\nVersion: v0.4.1\nDescription: KeyboardJS is a flexible and easy to use keyboard binding\nlibrary.\nAuthor: Robert Hurst.\n\nCopyright 2011, Robert William Hurst\nLicenced under the BSD License.\nSee https://raw.github.com/RobertWHurst/KeyboardJS/master/license.txt",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 26,
            "description": "Construct AMD version of the library",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 43,
            "description": "Construct CommonJS version of the library",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 64,
            "description": "Construct a Global version of the library",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 292,
            "description": "Enables KeyboardJS",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 309,
            "description": "Exits all active bindings and disables KeyboardJS",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 332,
            "description": "Exits all active bindings. Optionally passes an event to all binding\n handlers.",
            "params": [
                {
                    "name": "event",
                    "description": "[Optional]",
                    "type": "KeyboardEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 343,
            "description": "Key down event handler.",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 362,
            "description": "Key up event handler.",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 377,
            "description": "Accepts a key code and returns the key names defined by the current\n locale.",
            "params": [
                {
                    "name": "keyCode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "keyNames\tAn array of key names defined for the key\n code as defined by the current locale.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 388,
            "description": "Accepts a key name and returns the key code defined by the current\n locale.",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number|false"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 408,
            "description": "Accepts a key combo and an array of key names to inject once the key\n combo is satisfied.",
            "params": [
                {
                    "name": "combo",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectedKeys",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 424,
            "description": "Accepts a key combo and clears any and all macros bound to that key\ncombo.",
            "params": [
                {
                    "name": "combo",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 442,
            "description": "Executes macros against the active keys. Each macro's key combo is\n checked and if found to be satisfied, the macro's key names are injected\n into active keys.",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 460,
            "description": "Prunes active macros. Checks each active macro's key combo and if found\n to no longer to be satisfied, each of the macro's key names are removed\n from active keys.",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 484,
            "description": "Creates a binding object, and, if provided, binds a key down hander and\n a key up handler. Returns a binding object that emits keyup and\n keydown events.",
            "params": [
                {
                    "name": "keyCombo",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "keyDownCallback",
                    "description": "[Optional]",
                    "type": "Function"
                },
                {
                    "name": "keyUpCallback",
                    "description": "[Optional]",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "binding",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 531,
            "description": "Clears the binding",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 541,
            "description": "Accepts an event name. and any number of callbacks. When the event is\n emitted, all callbacks are executed. Available events are key up and\n key down.",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "subBinding",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 577,
            "description": "Clears the binding",
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 599,
            "description": "Clears all binding attached to a given key combo. Key name order does not\nmatter as long as the key combos equate.",
            "params": [
                {
                    "name": "keyCombo",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 614,
            "description": "Clears all binding attached to key combos containing a given key name.",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 635,
            "description": "Executes bindings that are active. Only allows the keys to be used once\n as to prevent binding overlap.",
            "params": [
                {
                    "name": "event",
                    "description": "The keyboard event.",
                    "type": "KeyboardEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 685,
            "description": "Removes bindings that are no longer satisfied by the active keys. Also\n fires the key up callbacks.",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "KeyboardEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 715,
            "description": "Compares two key combos returning true when they are functionally\n equivalent.",
            "params": [
                {
                    "name": "keyComboArrayA",
                    "description": "keyCombo A key combo string or array.",
                    "type": "String"
                },
                {
                    "name": "keyComboArrayB",
                    "description": "keyCombo A key combo string or array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 739,
            "description": "Checks to see if a key combo string or key array is satisfied by the\n currently active keys. It does not take into account spent keys.",
            "params": [
                {
                    "name": "keyCombo",
                    "description": "A key combo string or array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 767,
            "description": "Accepts a key combo array or string and returns a flat array containing all keys referenced by\nthe key combo.",
            "params": [
                {
                    "name": "keyCombo",
                    "description": "A key combo string or array.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 784,
            "description": "Parses a key combo string into a 3 dimensional array.\n- Level 1 - sub combos.\n- Level 2 - combo stages. A stage is a set of key name pairs that must\n be satisfied in the order they are defined.\n- Level 3 - each key name to the stage.",
            "params": [
                {
                    "name": "keyCombo",
                    "description": "A key combo string.",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 860,
            "description": "Stringifys a key combo.",
            "params": [
                {
                    "name": "keyComboArray",
                    "description": "A key combo array. If a key\n combo string is given it will be returned.",
                    "type": "Array|String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 885,
            "description": "Returns the a copy of the active keys array.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 893,
            "description": "Adds a key to the active keys array, but only if it has not already been\n added.",
            "params": [
                {
                    "name": "keyName",
                    "description": "The key name string.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 904,
            "description": "Removes a key from the active keys array.",
            "params": [
                {
                    "name": "keyNames",
                    "description": "The key name string.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 919,
            "description": "Registers a new locale. This is useful if you would like to add support for a new keyboard layout. It could also be useful for\nalternative key names. For example if you program games you could create a locale for your key mappings. Instead of key 65 mapped\nto 'a' you could map it to 'jump'.",
            "params": [
                {
                    "name": "localeName",
                    "description": "The name of the new locale.",
                    "type": "String"
                },
                {
                    "name": "localeMap",
                    "description": "The locale map.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\keyboard.js",
            "line": 938,
            "description": "Swaps the current locale.",
            "params": [
                {
                    "name": "localeName",
                    "description": "The locale to activate.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\less.min.js",
            "line": 10,
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " js\\object\\axis.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\object\\axis.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\object\\brush.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\object\\brush.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\object\\brush.js:288"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\object\\event.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\object\\event.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\object\\selector.js:130"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\object\\selector.js:157"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\object\\selector.js:397"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\object\\tooltip.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\object\\tooltip.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\utils\\constants.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\utils\\constants.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\utils\\less.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\utils\\less.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\utils\\treeUtil.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\utils\\treeUtil.js:1"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\utils\\util.js:1"
        },
        {
            "message": "unknown tag: support",
            "line": " js\\utils\\util.js:1"
        },
        {
            "message": "Missing item type\nCreate a responsive selector",
            "line": " js\\object\\selector.js:8"
        },
        {
            "message": "Missing item type\nConstructor",
            "line": " js\\object\\selector.js:33"
        },
        {
            "message": "Missing item type\nMethod to attach custom event",
            "line": " js\\object\\selector.js:54"
        },
        {
            "message": "Missing item type\nMethod to trigger event",
            "line": " js\\object\\selector.js:67"
        },
        {
            "message": "Missing item type\nMethod to remove event on function",
            "line": " js\\object\\selector.js:85"
        },
        {
            "message": "Missing item type\nAdd default events to current object",
            "line": " js\\object\\selector.js:97"
        },
        {
            "message": "Missing item type\nMethod to init properties for tooltip",
            "line": " js\\object\\selector.js:113"
        },
        {
            "message": "Missing item type\nRetrieve the container element",
            "line": " js\\object\\selector.js:130"
        },
        {
            "message": "Missing item type\nInit gap",
            "line": " js\\object\\selector.js:143"
        },
        {
            "message": "Missing item type\nInit data and put element\nallParents on children \nif it doesn't exist",
            "line": " js\\object\\selector.js:157"
        },
        {
            "message": "Missing item type\nMethod to init first parents outline",
            "line": " js\\object\\selector.js:185"
        },
        {
            "message": "Missing item type\nMethod to draw title of first parent",
            "line": " js\\object\\selector.js:254"
        },
        {
            "message": "Missing item type\nMethod to update first parents outline",
            "line": " js\\object\\selector.js:291"
        },
        {
            "message": "Missing item type\nMethod to update first parents title",
            "line": " js\\object\\selector.js:359"
        },
        {
            "message": "Missing item type\nGet the selector container size",
            "line": " js\\object\\selector.js:397"
        },
        {
            "message": "Missing item type\nMethod to draw the outline",
            "line": " js\\object\\selector.js:411"
        },
        {
            "message": "Missing item type\nMethod to draw the selector",
            "line": " js\\object\\selector.js:465"
        },
        {
            "message": "Missing item type\nMethod to draw the outline of node",
            "line": " js\\object\\selector.js:473"
        },
        {
            "message": "Missing item type\nMethod to redraw the selector\non a changed node",
            "line": " js\\object\\selector.js:503"
        },
        {
            "message": "Missing item type\nMethod to hide",
            "line": " js\\object\\selector.js:514"
        },
        {
            "message": "Missing item type\nMethod called on window resize event",
            "line": " js\\object\\selector.js:534"
        },
        {
            "message": "Missing item type\nFonctions d'initialisation",
            "line": " js\\visualizations\\presentation.js:120"
        },
        {
            "message": "Missing item type\nGetters AND Setters",
            "line": " js\\visualizations\\presentation.js:240"
        },
        {
            "message": "Missing item type\nMethods",
            "line": " js\\visualizations\\presentation.js:440"
        },
        {
            "message": "Missing item type\nFonctions d'initialisation",
            "line": " js\\visualizations\\timelineMin.js:80"
        },
        {
            "message": "Missing item type\nGetters AND Setters",
            "line": " js\\visualizations\\timelineMin.js:205"
        },
        {
            "message": "Missing item type\nMethods",
            "line": " js\\visualizations\\timelineMin.js:348"
        },
        {
            "message": "Missing item type\nFonctions d'initialisation",
            "line": " js\\visualizations\\treemap.js:112"
        },
        {
            "message": "Missing item type\nGetters AND Setters",
            "line": " js\\visualizations\\treemap.js:212"
        },
        {
            "message": "Missing item type\nMethods",
            "line": " js\\visualizations\\treemap.js:412"
        },
        {
            "message": "Missing item type\nTitle: KeyboardJS\nVersion: v0.4.1\nDescription: KeyboardJS is a flexible and easy to use keyboard binding\nlibrary.\nAuthor: Robert Hurst.\n\nCopyright 2011, Robert William Hurst\nLicenced under the BSD License.\nSee https://raw.github.com/RobertWHurst/KeyboardJS/master/license.txt",
            "line": " lib\\keyboard.js:1"
        },
        {
            "message": "Missing item type\nConstruct AMD version of the library",
            "line": " lib\\keyboard.js:26"
        },
        {
            "message": "Missing item type\nConstruct CommonJS version of the library",
            "line": " lib\\keyboard.js:43"
        },
        {
            "message": "Missing item type\nConstruct a Global version of the library",
            "line": " lib\\keyboard.js:64"
        },
        {
            "message": "Missing item type\nEnables KeyboardJS",
            "line": " lib\\keyboard.js:292"
        },
        {
            "message": "Missing item type\nExits all active bindings and disables KeyboardJS",
            "line": " lib\\keyboard.js:309"
        },
        {
            "message": "Missing item type\nExits all active bindings. Optionally passes an event to all binding\n handlers.",
            "line": " lib\\keyboard.js:332"
        },
        {
            "message": "Missing item type\nKey down event handler.",
            "line": " lib\\keyboard.js:343"
        },
        {
            "message": "Missing item type\nKey up event handler.",
            "line": " lib\\keyboard.js:362"
        },
        {
            "message": "Missing item type\nAccepts a key code and returns the key names defined by the current\n locale.",
            "line": " lib\\keyboard.js:377"
        },
        {
            "message": "Missing item type\nAccepts a key name and returns the key code defined by the current\n locale.",
            "line": " lib\\keyboard.js:388"
        },
        {
            "message": "Missing item type\nAccepts a key combo and an array of key names to inject once the key\n combo is satisfied.",
            "line": " lib\\keyboard.js:408"
        },
        {
            "message": "Missing item type\nAccepts a key combo and clears any and all macros bound to that key\ncombo.",
            "line": " lib\\keyboard.js:424"
        },
        {
            "message": "Missing item type\nExecutes macros against the active keys. Each macro's key combo is\n checked and if found to be satisfied, the macro's key names are injected\n into active keys.",
            "line": " lib\\keyboard.js:442"
        },
        {
            "message": "Missing item type\nPrunes active macros. Checks each active macro's key combo and if found\n to no longer to be satisfied, each of the macro's key names are removed\n from active keys.",
            "line": " lib\\keyboard.js:460"
        },
        {
            "message": "Missing item type\nCreates a binding object, and, if provided, binds a key down hander and\n a key up handler. Returns a binding object that emits keyup and\n keydown events.",
            "line": " lib\\keyboard.js:484"
        },
        {
            "message": "Missing item type\nClears the binding",
            "line": " lib\\keyboard.js:531"
        },
        {
            "message": "Missing item type\nAccepts an event name. and any number of callbacks. When the event is\n emitted, all callbacks are executed. Available events are key up and\n key down.",
            "line": " lib\\keyboard.js:541"
        },
        {
            "message": "Missing item type\nClears the binding",
            "line": " lib\\keyboard.js:577"
        },
        {
            "message": "Missing item type\nClears all binding attached to a given key combo. Key name order does not\nmatter as long as the key combos equate.",
            "line": " lib\\keyboard.js:599"
        },
        {
            "message": "Missing item type\nClears all binding attached to key combos containing a given key name.",
            "line": " lib\\keyboard.js:614"
        },
        {
            "message": "Missing item type\nExecutes bindings that are active. Only allows the keys to be used once\n as to prevent binding overlap.",
            "line": " lib\\keyboard.js:635"
        },
        {
            "message": "Missing item type\nRemoves bindings that are no longer satisfied by the active keys. Also\n fires the key up callbacks.",
            "line": " lib\\keyboard.js:685"
        },
        {
            "message": "Missing item type\nCompares two key combos returning true when they are functionally\n equivalent.",
            "line": " lib\\keyboard.js:715"
        },
        {
            "message": "Missing item type\nChecks to see if a key combo string or key array is satisfied by the\n currently active keys. It does not take into account spent keys.",
            "line": " lib\\keyboard.js:739"
        },
        {
            "message": "Missing item type\nAccepts a key combo array or string and returns a flat array containing all keys referenced by\nthe key combo.",
            "line": " lib\\keyboard.js:767"
        },
        {
            "message": "Missing item type\nParses a key combo string into a 3 dimensional array.\n- Level 1 - sub combos.\n- Level 2 - combo stages. A stage is a set of key name pairs that must\n be satisfied in the order they are defined.\n- Level 3 - each key name to the stage.",
            "line": " lib\\keyboard.js:784"
        },
        {
            "message": "Missing item type\nStringifys a key combo.",
            "line": " lib\\keyboard.js:860"
        },
        {
            "message": "Missing item type\nReturns the a copy of the active keys array.",
            "line": " lib\\keyboard.js:885"
        },
        {
            "message": "Missing item type\nAdds a key to the active keys array, but only if it has not already been\n added.",
            "line": " lib\\keyboard.js:893"
        },
        {
            "message": "Missing item type\nRemoves a key from the active keys array.",
            "line": " lib\\keyboard.js:904"
        },
        {
            "message": "Missing item type\nRegisters a new locale. This is useful if you would like to add support for a new keyboard layout. It could also be useful for\nalternative key names. For example if you program games you could create a locale for your key mappings. Instead of key 65 mapped\nto 'a' you could map it to 'jump'.",
            "line": " lib\\keyboard.js:919"
        },
        {
            "message": "Missing item type\nSwaps the current locale.",
            "line": " lib\\keyboard.js:938"
        },
        {
            "message": "Missing item type",
            "line": " lib\\less.min.js:10"
        }
    ]
}